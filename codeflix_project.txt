
User Churn
Brief
Objective
Analyze Real Data with SQL
Calculating Churn Rates

1. Four months into launching Codeflix, management asks you to look into subscription churn rates. It’s early on in the business and people are excited to know how the company is doing.

The marketing department is particularly interested in how the churn compares between two segments of users. They provide you with a dataset containing subscription data for users who were acquired through two distinct channels.

The dataset provided to you contains one SQL table, subscriptions. Within the table, there are 4 columns:

    id - the subscription id
    subscription_start - the start date of the subscription
    subscription_end - the end date of the subscription
    segment - this identifies which segment the subscription owner belongs to

Codeflix requires a minimum subscription length of 31 days, so a user can never start and end their subscription in the same month.


1.

Take a look at the first 100 rows of data in the subscriptions table. How many different segments do you see?
2.

Determine the range of months of data provided. Which months will you be able to calculate churn for?

CODE:

select min(subscription_start) as 'min',
 max(subscription_start) as 'max'
 from subscriptions;

RESULT:
min 	            max
2016-12-01 	2017-03-30


3.

You’ll be calculating the churn rate for both segments (87 and 30) over the first 3 months of 2017 (you can’t calculate it for December, since there are no subscription_end values yet). To get started, create a temporary table of months.


CODE: 

with months as(
  select
    '2017-01-01' as first_day,
    '2017-01-31' as last_day
  union
  select
    '2017-02-01' as first_day,
    '2017-02-28' as last_day
  union
  select
    '2017-03-01' as first_day,
    '2017-03-31' as last_day
  from subscriptions
)
select * from months;



RESULT: 
first_day 	last_day
2017-01-01 	2017-01-31
2017-02-01 	2017-02-28
2017-03-01 	2017-03-31


4.

Create a temporary table, cross_join, from subscriptions and your months. Be sure to SELECT every column.


CODE:

with months as(
  select
    '2017-01-01' as first_day,
    '2017-01-31' as last_day
  union
  select
    '2017-02-01' as first_day,
    '2017-02-28' as last_day
  union
  select
    '2017-03-01' as first_day,
    '2017-03-31' as last_day
  from subscriptions
),
cross_join as(
  select *
  from subscriptions
  cross join months
)
select * from cross_join limit 10; 

5.
Create a temporary table, status, from the cross_join table you created. This table should contain:

    id selected from cross_join
    month as an alias of first_day
    is_active_87 created using a CASE WHEN to find any users from segment 87 who existed prior to the beginning of the month. This is 1 if true and 0 otherwise.
    is_active_30 created using a CASE WHEN to find any users from segment 30 who existed prior to the beginning of the month. This is 1 if true and 0 otherwise.




code:

with months as(
  select
    '2017-01-01' as first_day,
    '2017-01-31' as last_day
  union
  select
    '2017-02-01' as first_day,
    '2017-02-28' as last_day
  union
  select
    '2017-03-01' as first_day,
    '2017-03-31' as last_day
  from subscriptions
),
cross_join as(
  select *
  from subscriptions
  cross join months
),
status as(
  select id, first_day as 'month',
  case
    when (subscription_start < first_day)
      and (subscription_end > first_day
            or subscription_end is null)
    and (segment = 87)
  then 1
    else 0
  end as 'is_active_87',
  case
    when (subscription_start < first_day)
    and (subscription_end > first_day
      or subscription_end is not null)
     and (segment = 30)
  then 1 
    else 0
  end as 'is_active_30'   
  from cross_join
)
select * from status; 



RESULT:

id 	month 	  is_active_87 	is_active_30
1 	2017-01-01 	1 	0
1 	2017-02-01 	0 	0
1 	2017-03-01 	0 	0
2 	2017-01-01 	1 	0
2 	2017-02-01 	0 	0
 


6. Add an is_canceled_87 and an is_canceled_30 column to the status temporary table. This should be 1 if the subscription is canceled during the month and 0 otherwise.

 CODE:


with months as(
  select
    '2017-01-01' as first_day,
    '2017-01-31' as last_day
  union
  select
    '2017-02-01' as first_day,
    '2017-02-28' as last_day
  union
  select
    '2017-03-01' as first_day,
    '2017-03-31' as last_day
  from subscriptions
),
cross_join as(
  select *
  from subscriptions
  cross join months
),
status as(
  select id, first_day as 'month',
  case
    when (subscription_start < first_day)
      and (subscription_end > first_day
            or subscription_end is null)
    and (segment = 87)
  then 1
    else 0
  end as is_active_87,
  case
    when (subscription_start < first_day)
    and (subscription_end > first_day
      or subscription_end is not null)
     and (segment = 30)
  then 1 
    else 0
  end as is_active_30,
  case
    when subscription_end between first_day
    and last_day and (segment=87)
    then 1
      else 0
   end as is_canceled_87,
   case
    when subscription_end between 
    first_day and last_day
    and (segment=30)
  then 1
    else 0
  end as is_canceled_30
  from cross_join
)
select * from status limit 100; 

7.

Create a status_aggregate temporary table that is a SUM of the active and canceled subscriptions for each segment, for each month.

The resulting columns should be:

    sum_active_87
    sum_active_30
    sum_canceled_87
    sum_canceled_30



CODE:

with months as(
  select
    '2017-01-01' as first_day,
    '2017-01-31' as last_day
  union
  select
    '2017-02-01' as first_day,
    '2017-02-28' as last_day
  union
  select
    '2017-03-01' as first_day,
    '2017-03-31' as last_day
  from subscriptions
),
cross_join as(
  select *
  from subscriptions
  cross join months
),
status as(
  select id, first_day as 'month',
  case
    when (subscription_start < first_day)
      and (subscription_end > first_day
            or subscription_end is null)
    and (segment = 87)
  then 1
    else 0
  end as is_active_87,
  case
    when (subscription_start < first_day)
    and (subscription_end > first_day
      or subscription_end is not null)
     and (segment = 30)
  then 1 
    else 0
  end as is_active_30,
  case
    when subscription_end between first_day
    and last_day and (segment=87)
    then 1
      else 0
   end as is_canceled_87,
   case
    when subscription_end between 
    first_day and last_day
    and (segment=30)
  then 1
    else 0
  end as is_canceled_30
  from cross_join
),
status_aggregate as(
  select month, sum(is_active_87) as sum_active_87,
  sum(is_active_30) as sum_active_30,
  sum(is_canceled_87) as sum_canceled_87,
  sum(is_canceled_30) as sum_canceled_30
  from status group by 1)
select * from status_aggregate; 



RESULT:

month 		sum_active_87 	sum_active_30 	sum_canceled_87 	sum_canceled_30
2017-01-01 		278 		89 		70 			22
2017-02-01 		462 		129 		148 			38
2017-03-01 		531 		144 		258 			84




8. Calculate the churn rates for the two segments over the three month period. Which segment has a lower churn rate?


CODE: 

...
select month, 
1.0 * sum_canceled_87/sum_active_87 as churn_rate_87,
1.0 * sum_canceled_30/sum_active_30 as churn_rate_30
from status_aggregate; 

RESULT:

month 		churn_rate_87 		churn_rate_30
2017-01-01 	0.251798561151079 	0.247191011235955
2017-02-01 	0.32034632034632 	0.294573643410853
2017-03-01 	0.485875706214689 	0.583333333333333